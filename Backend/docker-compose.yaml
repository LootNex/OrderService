services:
  producer:
    build:
      context: ./Producer
      dockerfile: Dockerfile
    container_name: Producer
    depends_on:
      kafka:
        condition: service_healthy
  consumer:
    build:
      context: ./Consumer
      dockerfile: Dockerfile
    container_name: Consumer
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
        CLUSTER_ID: 'i6B8hlxLSi2S_OMgfH1XNQ'
        KAFKA_NODE_ID: 1
        KAFKA_PROCESS_ROLES: broker,controller
        KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
        KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
        KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_LOG4J_OPTS: "-Dlog4j.rootLogger=ERROR,stdout"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
  postgres:
    image: postgres:latest
    container_name: postgres-container
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orders
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
  redis:
    image: redis:8.2.1
    container_name: redis-container
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "test1234"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "test1234", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s